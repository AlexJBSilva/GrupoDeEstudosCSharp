// <auto-generated />
using ByteBank.Infrastructure.Data.ByteBank;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ByteBank.Infrastructure.Data.ByteBank.Migrations
{
    [DbContext(typeof(ByteBankContext))]
    [Migration("20230507051742_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ByteBank.Domain.AggregateModels.AgenciaAggregates.Agencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Agencias");
                });

            modelBuilder.Entity("ByteBank.Domain.AggregateModels.ClienteAggregates.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoClienteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoClienteId");

                    b.ToTable("Clientes");

                    b.HasDiscriminator<int>("TipoClienteId");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ByteBank.Domain.AggregateModels.ClienteAggregates.TipoCliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoCliente");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fisico"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Juridico"
                        });
                });

            modelBuilder.Entity("ByteBank.Domain.AggregateModels.ContaAggregates.Conta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgenciaId")
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<decimal>("Saldo")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("TipoContaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgenciaId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("TipoContaId");

                    b.ToTable("Contas");

                    b.HasDiscriminator<int>("TipoContaId");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ByteBank.Domain.AggregateModels.ContaAggregates.TipoConta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoConta");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Corrente"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Poupanca"
                        });
                });

            modelBuilder.Entity("ByteBank.Domain.AggregateModels.ClienteAggregates.ClienteFisico", b =>
                {
                    b.HasBaseType("ByteBank.Domain.AggregateModels.ClienteAggregates.Cliente");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("ByteBank.Domain.AggregateModels.ClienteAggregates.ClienteJuridico", b =>
                {
                    b.HasBaseType("ByteBank.Domain.AggregateModels.ClienteAggregates.Cliente");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("ByteBank.Domain.AggregateModels.ContaAggregates.ContaCorrente", b =>
                {
                    b.HasBaseType("ByteBank.Domain.AggregateModels.ContaAggregates.Conta");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("ByteBank.Domain.AggregateModels.ContaAggregates.ContaPoupanca", b =>
                {
                    b.HasBaseType("ByteBank.Domain.AggregateModels.ContaAggregates.Conta");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("ByteBank.Domain.AggregateModels.AgenciaAggregates.Agencia", b =>
                {
                    b.OwnsOne("ByteBank.Domain.AggregateModels.AgenciaAggregates.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<int>("AgenciaId")
                                .HasColumnType("int");

                            b1.Property<string>("Cep")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Complemento")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Logradouro")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Numero")
                                .HasColumnType("int");

                            b1.HasKey("AgenciaId");

                            b1.ToTable("Agencias");

                            b1.WithOwner()
                                .HasForeignKey("AgenciaId");
                        });

                    b.Navigation("Endereco")
                        .IsRequired();
                });

            modelBuilder.Entity("ByteBank.Domain.AggregateModels.ClienteAggregates.Cliente", b =>
                {
                    b.HasOne("ByteBank.Domain.AggregateModels.ClienteAggregates.TipoCliente", null)
                        .WithMany()
                        .HasForeignKey("TipoClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ByteBank.Domain.AggregateModels.ClienteAggregates.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<int>("ClienteId")
                                .HasColumnType("int");

                            b1.Property<string>("Cep")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Complemento")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Logradouro")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Numero")
                                .HasColumnType("int");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.Navigation("Endereco")
                        .IsRequired();
                });

            modelBuilder.Entity("ByteBank.Domain.AggregateModels.ContaAggregates.Conta", b =>
                {
                    b.HasOne("ByteBank.Domain.AggregateModels.AgenciaAggregates.Agencia", null)
                        .WithMany()
                        .HasForeignKey("AgenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ByteBank.Domain.AggregateModels.ClienteAggregates.Cliente", null)
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ByteBank.Domain.AggregateModels.ContaAggregates.TipoConta", null)
                        .WithMany()
                        .HasForeignKey("TipoContaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
